var searchIndex = JSON.parse('{\
"probables":{"doc":"","t":[5,5,0,4,3,7,13,7,13,13,13,3,4,13,8,11,11,11,11,11,11,11,11,10,11,11,11,12,10,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,12,11,10,11,10,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["main","new_node","tree","Branch","CachedResult","DEPTH","Err","HEIGHT","Left","Ok","Parent","PrimaryNode","Results","Right","Tree","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch_leaf","branch_leaf","clone","clone_into","data","depth","depth","fmt","fmt","fmt","from","from","from","from","in_mem","inspect","inspect","into","into","into","into","left","new","new_branch","new_branch","recursive_leaf","recursive_leaf","right","state","state","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["probables","","","probables::tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Tree is common data structure that are used to represent …","Branch “Enums” have three states either { “Parent” …","CacheResults return data quickly. CacheResults you don’t …","","","","","","","PrimaryNode (Branch) is a connector which connect leaves. …","Results “Enums” either Ok , Err Ok =&gt; Data validation …","","","","","","","","","","","","Where the new leaf attached ","","","“Data” what you want to store ","","depth of the tree, Depth is the number of branch either on …","","","","","","","","","","","","","","","“Left” Branch position Reference","","","Create a new tree branches ; if branch is neither left or …","","","“Right” Branch position Reference","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,2,1,2,0,0,2,0,3,4,1,2,3,4,1,2,5,4,4,4,4,5,4,4,1,2,3,4,1,2,3,5,4,3,4,1,2,4,3,5,4,5,4,4,3,3,4,3,4,1,2,3,4,1,2,3,4,1,2],"f":[[[]],[[["string",3]],["primarynode",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["primarynode",3],["branch",4]],[["vec",3,["primarynode"]],["primarynode",3]]],[[["primarynode",3],["branch",4]],[["vec",3,["primarynode"]],["primarynode",3]]],[[],["primarynode",3]],[[]],null,[[["branch",4]],["usize",15]],[[["branch",4]],["usize",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["string",3],["branch",4],["usize",15]],["results",4]],[[["string",3],["branch",4],["usize",15]],["results",4]],[[]],[[]],[[]],[[]],null,[[],["cachedresult",3]],[[["primarynode",3],["branch",4],["u8",15]],[["vec",3,["primarynode"]],["primarynode",3]]],[[["primarynode",3],["branch",4],["u8",15]],[["vec",3,["primarynode"]],["primarynode",3]]],[[["usize",15],["branch",4]],["usize",15]],[[["usize",15],["branch",4]],["usize",15]],null,[[["string",3]],["string",3]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Results"],[4,"Branch"],[3,"CachedResult"],[3,"PrimaryNode"],[8,"Tree"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};